#import <Foundation/Foundation.h>
#import "DUBError.h"
#import "DUBSingleRecording.h"
#import "DUBRecordingList.h"
#import "DUBPostRecording.h"
#import "DUBRecordingTags.h"
#import "DUBObject.h"
#import "DUBApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface DUBRecordingsApi: NSObject

@property(nonatomic, assign)DUBApiClient *apiClient;

-(instancetype) initWithApiClient:(DUBApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(NSNumber*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(DUBRecordingsApi*) sharedAPI;
///
///
/// 
/// Deletes the given recording
///
/// @param recordingId The recording id to delete
/// 
///
/// @return 
-(NSNumber*) deleteRecordingWithRecordingId: (NSString*) recordingId
    completionHandler: (void (^)(NSError* error)) handler;


///
///
/// 
/// Remove all tags for a recording
///
/// @param recordingId The recording id to remove tags from
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) deleteRecordingTagsWithRecordingId: (NSString*) recordingId
    completionHandler: (void (^)(DUBSingleRecording* output, NSError* error)) handler;


///
///
/// 
/// Get the recordings for a given account
///
/// @param accountId The account id to get recordings for
/// @param query A search query to find matching recordings
/// @param number A number to match for recordings &#39;to&#39; or &#39;from&#39; value
/// @param count The max count of recordings to return
/// @param afterId The recording id to get all recordings after, must be used in conjunction with before_id
/// @param beforeId The recording id to get all recordings before, must be used in conjunction with after_id
/// @param page The page of recordings to return, cannot be used with before_id/after_id
/// 
///
/// @return DUBRecordingList*
-(DUBRecordingList *) getAccountRecordingsWithAccountId: (NSString*) accountId
    query: (NSString*) query
    number: (NSString*) number
    count: (NSNumber*) count
    afterId: (NSString*) afterId
    beforeId: (NSString*) beforeId
    page: (NSNumber*) page
    completionHandler: (void (^)(DUBRecordingList* output, NSError* error)) handler;


///
///
/// 
/// Get the details for a given recording
///
/// @param recordingId The recording id to get
/// @param listener Url encoded email address of listener for the recording, will default to current user with authorization code/implicit flows. If not provided with password flow recording_url will not be returned
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) getRecordingWithRecordingId: (NSString*) recordingId
    listener: (NSString*) listener
    completionHandler: (void (^)(DUBSingleRecording* output, NSError* error)) handler;


///
///
/// 
/// Get the unidentified recordings for a given group (group authentication required)
///
/// @param groupId The group id to get unidentified recordings for
/// @param query A search query to find matching recordings
/// @param number A number to match for recordings &#39;to&#39; or &#39;from&#39; value
/// @param count The max count of recordings to return
/// @param afterId The recording id to get all recordings after, must be used in conjunction with before_id
/// @param beforeId The recording id to get all recordings before, must be used in conjunction with after_id
/// @param page The page of recordings to return, cannot be used with before_id/after_id
/// 
///
/// @return DUBRecordingList*
-(NSNumber*) getUnidentifiedRecordingsWithGroupId: (NSString*) groupId
    query: (NSString*) query
    number: (NSString*) number
    count: (NSNumber*) count
    afterId: (NSString*) afterId
    beforeId: (NSString*) beforeId
    page: (NSNumber*) page
    completionHandler: (void (^)(DUBRecordingList* output, NSError* error)) handler;


///
///
/// 
/// Create a new recording in the given account
///
/// @param accountId The account id to create the recording in
/// @param recording Details of the recording to create
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) postAccountRecordingWithAccountId: (NSString*) accountId
    recording: (DUBPostRecording*) recording
    completionHandler: (void (^)(DUBRecordingList* output, NSError* error)) handler;


///
///
/// 
/// Create tags for a recording, overrides any existing tags
///
/// @param recordingId The recording id to create tags for
/// @param tags The tags to create
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) postRecordingTagsWithRecordingId: (NSString*) recordingId
    tags: (DUBRecordingTags*) tags
    completionHandler: (void (^)(DUBSingleRecording* output, NSError* error)) handler;


///
///
/// 
/// Create a new unidentified recording in the given group
///
/// @param groupId The group id to create the unidentified recording in
/// @param recording Details of the recording to create
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) postUnidentifiedRecordingWithGroupId: (NSString*) groupId
    recording: (DUBPostRecording*) recording
    completionHandler: (void (^)(DUBSingleRecording* output, NSError* error)) handler;


///
///
/// 
/// Deletes the details for a given recording
///
/// @param recordingId The recording id to update metadata
/// @param metadata The metadata to update
/// 
///
/// @return DUBSingleRecording*
-(NSNumber*) putRecordingMetadataWithRecordingId: (NSString*) recordingId
    metadata: (NSObject*) metadata
    completionHandler: (void (^)(DUBSingleRecording* output, NSError* error)) handler;



@end
